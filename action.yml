name: 'Update Postmant Environments'
description: 'Merges the values from a public and a private environment in order to .'

inputs:
  public_environment:
    description: 'The id of the Public environment to get the public variables from.'
    required: true
  secret_environment:
    description: 'The id of the Secret environment to update, containing the secrets to be injected on the dest env.'
    required: true
  target_environment:
    description: 'The id of the Target environment to update.'
runs:
  using: "composite"
  steps:      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install requests
      shell: bash

    - name: Run script
      # working-directory: ./
      env:
        POSTMAN_API_KEY: ${{ inputs.POSTMAN_API_KEY }}
        POSTMAN_ENV_PUBLIC: ${{ inputs.public_environment }}
        POSTMAN_ENV_SECRET: ${{ inputs.secret_environment }}
        POSTMAN_ENV_TARGET: ${{ inputs.target_environment }}
      run: |
        import json
        import os
        import requests

        print("----")
        print("os.environ")
        print("----")

        ENV_SECRET = os.getenv("POSTMAN_ENV_SECRET")
        ENV_PUBLIC = os.getenv("POSTMAN_ENV_PUBLIC")
        ENV_TARGET = os.getenv("POSTMAN_ENV_TARGET")

        API_KEY = os.getenv("POSTMAN_APIKEY")
        HEADERS={"X-API-Key": API_KEY}

        def get_environment(environment_id):
            response = requests.get(f"https://api.getpostman.com/environments/{environment_id}d", headers=HEADERS)
            if response.status_code != 200:
                raise Exception(f"Environment {environment_id} could not be retrieved: {json.dumps(response.json(), indent=2)}")
            return response.json()
            

        env_public = get_environment(ENV_PUBLIC)
        env_secret = get_environment(ENV_SECRET)
        env_target = get_environment(ENV_TARGET)

        def merge_values(origin_values, secret_values):
            secrets_dict = dict([(x["key"], x) for x in secret_values])
            target_values = []
            for origin_value in origin_values:
                key = origin_value["key"]
                if key in secrets_dict:
                    target_values.append(secrets_dict.get(key))
                else:
                    target_values.append(origin_value)

            return target_values


        merged_values = merge_values(env_public["environment"]["values"], env_secret["environment"]["values"])

        env_target["environment"]["values"] = merged_values
        response = requests.put(f"https://api.getpostman.com/environments/{ENV_TARGET}", data=json.dumps(env_target), headers=HEADERS)

        if 200 == response.status_code:
            print(f"Environment '{env_target['environment']['name']}' updated successfully.")
        else:
            raise Exception(f"Environment was not updated: {json.dumps(response.json(), indent=2)}")
      shell: python

